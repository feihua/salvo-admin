// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::{AppError, AppResult};
use crate::common::result::{ok_result, ok_result_data, ok_result_page};
use crate::model::system::sys_notice_model::Notice;
use crate::vo::system::sys_notice_vo::*;
use crate::RB;
use rbatis::plugin::page::PageRequest;
use rbatis::rbdc::DateTime;
use rbs::value;
use salvo::prelude::*;
use salvo::{Request, Response};

/*
 *添加通知公告表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_notice(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let mut item = req.parse_json::<NoticeReq>().await?;
    log::info!("add sys_notice params: {:?}", &item);

    let rb = &mut RB.clone();

    if Notice::exists_by_title(rb, &item.notice_title).await? {
        return Err(AppError::BusinessError("公告标题已存在"));
    }

    item.id = None;
    Notice::insert(rb, &Notice::from(item)).await.map(|_| ok_result(res))?
}

/*
 *删除通知公告表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_notice(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DeleteNoticeReq>().await?;

    log::info!("delete sys_notice params: {:?}", &item);

    let rb = &mut RB.clone();

    Notice::delete_by_map(rb, value! {"id": &item.ids}).await.map(|_| ok_result(res))?
}

/*
 *更新通知公告表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_notice(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<NoticeReq>().await?;
    log::info!("update sys_notice params: {:?}", &item);

    let rb = &mut RB.clone();
    let id = item.id;
    if id.is_none() {
        return Err(AppError::BusinessError("主键不能为空"));
    }
    if Notice::select_by_id(rb, &id.unwrap_or_default()).await?.is_none() {
        return Err(AppError::BusinessError("通知公告表不存在"));
    };

    if Notice::exists_by_title_except_id(rb, &item.notice_title, id.unwrap_or_default()).await? {
        return Err(AppError::BusinessError("公告标题已存在"));
    }

    Notice::update_by_map(rb, &Notice::from(item), value! {"id": &id}).await.map(|_| ok_result(res))?
}

/*
 *更新通知公告表状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_notice_status(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<UpdateNoticeStatusReq>().await?;
    log::info!("update sys_notice_status params: {:?}", &item);

    let update_sql = format!(
        "update sys_notice set status = ? ,update_time = ? where id in ({})",
        item.ids.iter().map(|_| "?").collect::<Vec<&str>>().join(", ")
    );

    let mut param = vec![value!(item.status), value!(DateTime::now())];
    param.extend(item.ids.iter().map(|&id| value!(id)));

    RB.clone().exec(&update_sql, param).await.map(|_| ok_result(res))?
}

/*
 *查询通知公告表详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_notice_detail(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryNoticeDetailReq>().await?;

    log::info!("query sys_notice_detail params: {:?}", &item);

    Notice::select_by_id(&mut RB.clone(), &item.id).await?.map_or_else(
        || Err(AppError::BusinessError("通知公告表不存在")),
        |x| {
            let notice: NoticeResp = x.into();
            ok_result_data(res, notice)
        },
    )
}

/*
 *查询通知公告表列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_notice_list(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let req = req.parse_json::<QueryNoticeListReq>().await?;
    log::info!("query sys_notice_list params: {:?}", &req);

    let rb = &mut RB.clone();
    let item = &req;

    Notice::select_sys_notice_list(rb, &PageRequest::from(item), item)
        .await
        .map(|x| ok_result_page(res, x.records.into_iter().map(|x| x.into()).collect::<Vec<NoticeResp>>(), x.total))?
}
