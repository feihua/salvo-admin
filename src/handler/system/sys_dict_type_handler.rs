// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::{AppError, AppResult};
use crate::common::result::{ok_result, ok_result_data, ok_result_page};
use crate::model::system::sys_dict_data_model::{count_dict_data_by_type, update_dict_data_type};
use crate::model::system::sys_dict_type_model::DictType;
use crate::vo::system::sys_dict_type_vo::*;
use crate::RB;
use rbatis::plugin::page::PageRequest;
use rbatis::rbdc::DateTime;
use rbs::value;
use salvo::prelude::*;
use salvo::{Request, Response};

/*
 *添加字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DictTypeReq>().await?;
    log::info!("add sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    if DictType::select_by_dict_type(rb, &item.dict_type).await?.is_some() {
        return Err(AppError::BusinessError("字典类型已存在"));
    }

    DictType::insert(rb, &DictType::from(item)).await.map(|_| ok_result(res))?
}

/*
 *删除字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DeleteDictTypeReq>().await?;
    log::info!("delete sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    let ids = item.ids.clone();
    for id in ids {
        let p = match DictType::select_by_id(rb, &id).await? {
            None => return Err(AppError::BusinessError("字典类型不存在,不能删除")),
            Some(x) => x,
        };

        let res_count = count_dict_data_by_type(rb, &p.dict_type).await?;
        if res_count > 0 {
            return Err(AppError::BusinessError("已分配,不能删除"));
        }
    }

    DictType::delete_by_map(rb, value! {"id": &item.ids}).await.map(|_| ok_result(res))?
}

/*
 *更新字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DictTypeReq>().await?;
    log::info!("update sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    let id = item.id;
    if DictType::select_by_id(rb, &id.unwrap_or_default()).await?.is_none() {
        return Err(AppError::BusinessError("字典类型不存在"));
    }

    if let Some(x) = DictType::select_by_dict_type(rb, &item.dict_type).await? {
        if x.id != id {
            return Err(AppError::BusinessError("字典类型已存在"));
        }

        let dict_type = x.dict_type;
        update_dict_data_type(rb, &*item.dict_type, &dict_type).await?;
    }

    let mut data = DictType::from(item);
    data.update_time = Some(DateTime::now());
    DictType::update_by_map(rb, &data, value! {"id": &id}).await.map(|_| ok_result(res))?
}

/*
 *更新字典类型表状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type_status(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<UpdateDictTypeStatusReq>().await?;

    let rb = &mut RB.clone();
    log::info!("update sys_dict_type_status params: {:?}", &item);

    let update_sql = format!("update sys_dict_type set status = ? ,update_time = ? where id in ({})", item.ids.iter().map(|_| "?").collect::<Vec<&str>>().join(", "));

    let mut param = vec![value!(item.status),value!(DateTime::now())];
    param.extend(item.ids.iter().map(|&id| value!(id)));

    rb.exec(&update_sql, param).await.map(|_| ok_result(res))?
}

/*
 *查询字典类型表详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_detail(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryDictTypeDetailReq>().await?;

    log::info!("query sys_dict_type_detail params: {:?}", &item);

    DictType::select_by_id(&mut RB.clone(), &item.id).await?.map_or_else(
        || Err(AppError::BusinessError("字典类型不存在")),
        |x| {
            let data: DictTypeResp = x.into();
            ok_result_data(res, data)
        },
    )
}

/*
 *查询字典类型表列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_list(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let req = req.parse_json::<QueryDictTypeListReq>().await?;
    log::info!("query sys_dict_type_list params: {:?}", &req);

    let rb = &mut RB.clone();
    let item = &req;

    DictType::select_dict_type_list(rb, &PageRequest::from(item), item)
        .await
        .map(|x| ok_result_page(res, x.records.into_iter().map(|x| x.into()).collect::<Vec<DictTypeResp>>(), x.total))?
}
