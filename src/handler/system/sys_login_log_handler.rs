// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::{AppError, AppResult};
use crate::common::result::{ok_result, ok_result_data, ok_result_page};
use crate::model::system::sys_login_log_model::LoginLog;
use crate::vo::system::sys_login_log_vo::*;
use crate::RB;
use rbatis::plugin::page::PageRequest;
use rbs::value;
use salvo::prelude::*;
use salvo::{Request, Response};
/*
 *删除系统访问记录
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_login_log(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DeleteLoginLogReq>().await?;
    log::info!("delete sys_login_log params: {:?}", &item);

    let rb = &mut RB.clone();

    LoginLog::delete_by_map(rb, value! {"id": &item.ids}).await.map(|_| ok_result(res))?
}

/*
 *查询系统访问记录详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_login_log_detail(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryLoginLogDetailReq>().await?;
    log::info!("query sys_login_log_detail params: {:?}", &item);

    LoginLog::select_by_id(&mut RB.clone(), &item.id).await?.map_or_else(
        || Err(AppError::BusinessError("系统访问记录不存在")),
        |x| {
            let data: LoginLogResp = x.into();
            ok_result_data(res, data)
        },
    )
}

/*
 *查询系统访问记录列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_login_log_list(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let req = req.parse_json::<QueryLoginLogListReq>().await?;
    log::info!("query sys_login_log_list params: {:?}", &req);

    let rb = &mut RB.clone();
    let item = &req;

    LoginLog::select_login_log_list(rb, &PageRequest::from(item), item)
        .await
        .map(|x| ok_result_page(res, x.records.into_iter().map(|x| x.into()).collect::<Vec<LoginLogResp>>(), x.total))?
}
