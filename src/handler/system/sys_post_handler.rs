// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::{AppError, AppResult};
use crate::common::result::{ok_result, ok_result_data, ok_result_page};
use crate::model::system::sys_post_model::Post;
use crate::model::system::sys_user_post_model::count_user_post_by_id;
use crate::vo::system::sys_post_vo::*;
use crate::RB;
use rbatis::plugin::page::PageRequest;
use rbatis::rbdc::DateTime;
use rbs::value;
use salvo::prelude::*;
use salvo::{Request, Response};
/*
 *添加岗位信息表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_post(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let mut item = req.parse_json::<PostReq>().await?;
    log::info!("add sys_post params: {:?}", &item);

    let rb = &mut RB.clone();

    if Post::select_by_name(rb, &item.post_name, None).await?.is_some() {
        return Err(AppError::BusinessError("岗位名称已存在"));
    }

    if Post::select_by_code(rb, &item.post_code, None).await?.is_some() {
        return Err(AppError::BusinessError("岗位编码已存在"));
    }

    item.id = None;
    Post::insert(rb, &Post::from(item)).await.map(|_| ok_result(res))?
}

/*
 *删除岗位信息表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_post(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DeletePostReq>().await?;
    log::info!("delete sys_post params: {:?}", &item);

    let ids = item.ids.clone();
    let rb = &mut RB.clone();
    for id in ids {
        match Post::select_by_id(rb, &id).await? {
            None => return Err(AppError::BusinessError("不能删除")),
            Some(_) => {
                if count_user_post_by_id(rb, id).await? > 0 {
                    return Err(AppError::BusinessError("已分配,不能删除"));
                }
            }
        };
    }

    Post::delete_by_map(rb, value! {"id": &item.ids}).await.map(|_| ok_result(res))?
}

/*
 *更新岗位信息表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_post(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<PostReq>().await?;
    log::info!("update sys_post params: {:?}", &item);

    let rb = &mut RB.clone();

    let id = item.id;

    if id.is_none() {
        return Err(AppError::BusinessError("主键不能为空"));
    }
    if Post::select_by_id(rb, &id.unwrap_or_default()).await?.is_none() {
        return Err(AppError::BusinessError("岗位不存在"));
    }

    if Post::select_by_name(rb, &item.post_name, id).await?.is_some() {
        return Err(AppError::BusinessError("岗位名称已存在"));
    }

    if Post::select_by_code(rb, &item.post_code, id).await?.is_some() {
        return Err(AppError::BusinessError("岗位编码已存在"));
    }

    Post::update_by_map(rb, &Post::from(item), value! {"id": &id}).await.map(|_| ok_result(res))?
}

/*
 *更新岗位信息表状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_post_status(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<UpdatePostStatusReq>().await?;
    log::info!("update sys_post_status params: {:?}", &item);

    let update_sql = format!(
        "update sys_post set status = ? ,update_time = ? where id in ({})",
        item.ids.iter().map(|_| "?").collect::<Vec<&str>>().join(", ")
    );

    let mut param = vec![value!(item.status), value!(DateTime::now())];
    param.extend(item.ids.iter().map(|&id| value!(id)));

    RB.clone().exec(&update_sql, param).await.map(|_| ok_result(res))?
}

/*
 *查询岗位信息表详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_post_detail(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryPostDetailReq>().await?;
    log::info!("query sys_post_detail params: {:?}", &item);

    Post::select_by_id(&mut RB.clone(), &item.id).await?.map_or_else(
        || Err(AppError::BusinessError("岗位不存在")),
        |x| {
            let data: PostResp = x.into();
            ok_result_data(res, data)
        },
    )
}

/*
 *查询岗位信息表列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_post_list(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let req = req.parse_json::<QueryPostListReq>().await?;
    log::info!("query sys_post_list params: {:?}", &req);

    let rb = &mut RB.clone();
    let item = &req;

    Post::select_post_list(rb, &PageRequest::from(item), item)
        .await
        .map(|x| ok_result_page(res, x.records.into_iter().map(|x| x.into()).collect::<Vec<PostResp>>(), x.total))?
}
