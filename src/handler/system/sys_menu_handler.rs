// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::{AppError, AppResult};
use crate::common::result::{ok_result, ok_result_data, ok_result_page};
use crate::model::system::sys_menu_model::{select_count_menu_by_parent_id, Menu};
use crate::model::system::sys_role_menu_model::select_count_menu_by_menu_id;
use crate::vo::system::sys_menu_vo::*;
use crate::RB;
use rbatis::rbdc::DateTime;
use rbatis::PageRequest;
use rbs::value;
use salvo::prelude::*;
use salvo::{Request, Response};

/*
 *添加菜单信息
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_menu(req: &mut Request, res: &mut Response) -> AppResult {
    let mut item = req.parse_json::<MenuReq>().await?;
    log::info!("add sys_menu params: {:?}", &item);

    let rb = &mut RB.clone();
    if Menu::select_by_menu_name(rb, &item.menu_name).await?.is_some() {
        return Err(AppError::BusinessError("菜单名称已存在"));
    }

    if let Some(x) = item.menu_url.clone() {
        if Menu::select_by_menu_url(rb, x.as_str()).await?.is_some() {
            return Err(AppError::BusinessError("路由路径已存在"));
        }
    }

    item.id = None;
    Menu::insert(rb, &Menu::from(item)).await.map(|_| ok_result(res))?
}

/*
 *删除菜单信息
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_menu(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<DeleteMenuReq>().await?;
    log::info!("delete sys_menu params: {:?}", &item);

    let rb = &mut RB.clone();

    let ids = item.ids;
    for x in ids.clone() {
        if select_count_menu_by_parent_id(rb, &x).await? > 0 {
            return Err(AppError::BusinessError("存在子菜单,不允许删除"));
        }

        if select_count_menu_by_menu_id(rb, &x).await? > 0 {
            return Err(AppError::BusinessError("菜单已分配,不允许删除"));
        }
    }

    Menu::delete_by_map(rb, value! {"id": &ids}).await.map(|_| ok_result(res))?
}

/*
 *更新菜单信息
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_menu(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<MenuReq>().await?;
    log::info!("update sys_menu params: {:?}", &item);

    let rb = &mut RB.clone();

    let id = item.id;

    if id.is_none() {
        return Err(AppError::BusinessError("主键不能为空"));
    }

    if Menu::select_by_id(rb, &id.unwrap_or_default()).await?.is_none() {
        return Err(AppError::BusinessError("菜单信息不存在"));
    }

    if let Some(x) = Menu::select_by_menu_name(rb, &item.menu_name).await? {
        if x.id != id {
            return Err(AppError::BusinessError("菜单名称已存在"));
        }
    }

    let menu_url = item.menu_url.clone();
    if menu_url.is_some() {
        if let Some(x) = Menu::select_by_menu_url(rb, &menu_url.unwrap()).await? {
            if x.id != id {
                return Err(AppError::BusinessError("路由路径已存在"));
            }
        }
    }

    Menu::update_by_map(rb, &Menu::from(item), value! {"id": &id}).await.map(|_| ok_result(res))?
}

/*
 *更新菜单信息状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_menu_status(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<UpdateMenuStatusReq>().await?;

    log::info!("update sys_menu_status params: {:?}", &item);

    let update_sql = format!(
        "update sys_menu set status = ? ,update_time = ? where id in ({})",
        item.ids.iter().map(|_| "?").collect::<Vec<&str>>().join(", ")
    );

    let mut param = vec![value!(item.status), value!(DateTime::now())];
    param.extend(item.ids.iter().map(|&id| value!(id)));

    RB.clone().exec(&update_sql, param).await.map(|_| ok_result(res))?
}

/*
 *查询菜单信息详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_menu_detail(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<QueryMenuDetailReq>().await?;
    log::info!("query sys_menu_detail params: {:?}", &item);

    Menu::select_by_id(&mut RB.clone(), &item.id).await?.map_or_else(
        || Err(AppError::BusinessError("菜单信息不存在")),
        |x| {
            let data: MenuResp = x.into();
            ok_result_data(res, data)
        },
    )
}

/*
 *查询菜单信息列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_menu_list(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<QueryMenuListReq>().await?;
    log::info!("query sys_menu_list params: {:?}", &item);

    let rb = &mut RB.clone();

    let menu_name = item.menu_name;
    let parent_id = item.parent_id;
    let status = item.status;

    Menu::query_sys_menu_list(rb, menu_name, parent_id, status)
        .await
        .map(|x| ok_result_data(res, x.into_iter().map(|x| x.into()).collect::<Vec<MenuResp>>()))?
}

/*
 *查询菜单信息(排除按钮)
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_menu_list_simple(res: &mut Response) -> AppResult {
    let mut list: Vec<MenuListSimpleDataResp> = Vec::new();

    for x in Menu::select_menu_list(&mut RB.clone()).await? {
        list.push(MenuListSimpleDataResp {
            id: x.id,               //主键
            menu_name: x.menu_name, //菜单名称
            parent_id: x.parent_id, //父ID
        })
    }

    ok_result_data(res, list)
}
/*
 *查询菜单信息列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_menu_resource_list(req: &mut Request, res: &mut Response) -> AppResult {
    let item = req.parse_json::<QueryMenuListReq>().await?;
    log::info!("query sys_menu_list params: {:?}", &item);

    let rb = &mut RB.clone();

    let menu_name = item.menu_name;
    let parent_id = item.parent_id;
    let status = item.status;

    let page = &PageRequest::new(item.page_no, item.page_size);

    Menu::query_sys_menu_resource_list(rb, page, menu_name, parent_id, status)
        .await
        .map(|x| ok_result_page(res, x.records.into_iter().map(|x| x.into()).collect::<Vec<MenuResp>>(), x.total))?
}
